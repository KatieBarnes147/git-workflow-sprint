# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import user_service_pb2 as user__service__pb2


class UserServiceStub(object):
    """User service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetUser = channel.unary_unary(
                '/user_service.UserService/GetUser',
                request_serializer=user__service__pb2.GetUserRequest.SerializeToString,
                response_deserializer=user__service__pb2.GetUserResponse.FromString,
                )
        self.ListUsers = channel.unary_unary(
                '/user_service.UserService/ListUsers',
                request_serializer=user__service__pb2.ListUsersRequest.SerializeToString,
                response_deserializer=user__service__pb2.ListUsersResponse.FromString,
                )
        self.CreateUser = channel.unary_unary(
                '/user_service.UserService/CreateUser',
                request_serializer=user__service__pb2.CreateUserRequest.SerializeToString,
                response_deserializer=user__service__pb2.CreateUserResponse.FromString,
                )
        self.ValidateCoordinates = channel.unary_unary(
                '/user_service.UserService/ValidateCoordinates',
                request_serializer=user__service__pb2.CoordinatesRequest.SerializeToString,
                response_deserializer=user__service__pb2.ValidationResponse.FromString,
                )
        self.GetGridInfo = channel.unary_unary(
                '/user_service.UserService/GetGridInfo',
                request_serializer=user__service__pb2.CoordinatesRequest.SerializeToString,
                response_deserializer=user__service__pb2.GridInfoResponse.FromString,
                )
        self.GetWeatherForecast = channel.unary_unary(
                '/user_service.UserService/GetWeatherForecast',
                request_serializer=user__service__pb2.GridInfoRequest.SerializeToString,
                response_deserializer=user__service__pb2.WeatherForecastResponse.FromString,
                )


class UserServiceServicer(object):
    """User service definition
    """

    def GetUser(self, request, context):
        """Existing user methods
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateCoordinates(self, request, context):
        """New methods for Project #2
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGridInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWeatherForecast(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUser,
                    request_deserializer=user__service__pb2.GetUserRequest.FromString,
                    response_serializer=user__service__pb2.GetUserResponse.SerializeToString,
            ),
            'ListUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListUsers,
                    request_deserializer=user__service__pb2.ListUsersRequest.FromString,
                    response_serializer=user__service__pb2.ListUsersResponse.SerializeToString,
            ),
            'CreateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateUser,
                    request_deserializer=user__service__pb2.CreateUserRequest.FromString,
                    response_serializer=user__service__pb2.CreateUserResponse.SerializeToString,
            ),
            'ValidateCoordinates': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateCoordinates,
                    request_deserializer=user__service__pb2.CoordinatesRequest.FromString,
                    response_serializer=user__service__pb2.ValidationResponse.SerializeToString,
            ),
            'GetGridInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGridInfo,
                    request_deserializer=user__service__pb2.CoordinatesRequest.FromString,
                    response_serializer=user__service__pb2.GridInfoResponse.SerializeToString,
            ),
            'GetWeatherForecast': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWeatherForecast,
                    request_deserializer=user__service__pb2.GridInfoRequest.FromString,
                    response_serializer=user__service__pb2.WeatherForecastResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'user_service.UserService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UserService(object):
    """User service definition
    """

    @staticmethod
    def GetUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user_service.UserService/GetUser',
            user__service__pb2.GetUserRequest.SerializeToString,
            user__service__pb2.GetUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user_service.UserService/ListUsers',
            user__service__pb2.ListUsersRequest.SerializeToString,
            user__service__pb2.ListUsersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user_service.UserService/CreateUser',
            user__service__pb2.CreateUserRequest.SerializeToString,
            user__service__pb2.CreateUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ValidateCoordinates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user_service.UserService/ValidateCoordinates',
            user__service__pb2.CoordinatesRequest.SerializeToString,
            user__service__pb2.ValidationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGridInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user_service.UserService/GetGridInfo',
            user__service__pb2.CoordinatesRequest.SerializeToString,
            user__service__pb2.GridInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWeatherForecast(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/user_service.UserService/GetWeatherForecast',
            user__service__pb2.GridInfoRequest.SerializeToString,
            user__service__pb2.WeatherForecastResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
